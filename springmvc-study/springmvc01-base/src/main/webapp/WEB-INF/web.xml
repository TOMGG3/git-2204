<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--字符编码过滤器-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--通过过滤器的初始化参数设置字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置核心控制器-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--
        通过Serlvet的初始化参数修改配置文件的名称和位置
        默认的位置和名称：/WEB-INF/[DispatcherServlet的名称]-serlvet.xml
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--核心控制器在服务器启动时创建-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--
        在web项目中进入springmvc流程中的请求配置
        第一种：*.后缀名，表示所有以后缀名命名的请求会进入springmvc的流程
                注意：后缀名不能以静态资源和jsp来命名
                优点：无需对静态资源单独处理
                缺点：不支持restful风格
        第二种：/*，在springmvc中是一种错误配置，导致静态资源以及jsp请求进入springmvc的流程中
        第三种：/，在springmvc表示接收除jsp之外的所有请求
            优点：支持restful风格
            缺点：会导致静态资源进入springmvc的流程，所以需要单独处理
        -->
        <!--*.do表示所有以.do结尾的请求交给springmvc的核心控制器来处理-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    
    <!--欢迎页面-->
    <welcome-file-list>
        <welcome-file>/pages/index.jsp</welcome-file>
    </welcome-file-list>
</web-app>